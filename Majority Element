// Majority Element using brute force
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
    
        for(int valu :nums){
                int fre = 0;
                for(int el :nums){
                    if(el == valu){
                        fre++;
                    }
                }
                if(fre >n/2){
                    return valu;
                }
        }
        return -1;
    }
};


// Majority Element optimize(O(ologn)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n= nums.size();
        //sort
        sort(nums.begin(),nums.end());

        int fre = 1, ans = nums[0];
        for(int i=1;i<n;i++){
            if(nums[i]==nums[i-1]){
                fre++;
            }else{
                fre =1;
                ans =nums[i];
            }
            if(fre > n/2){
                return ans;
            }
        } 
        return ans;
    }
};


// Majority Element moore's voting algorithm
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n  = nums.size();
        int fre =  0 , ans  = 0;
        for (int i = 0;i<n ;i++){
            if(fre == 0){
                ans = nums[i];
            }
            if(ans == nums[i]){
                fre++;
            }else{
                fre--;
            }
        }
        return ans;
    }
};
